// src/auth/auth.service.ts
// –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

import {
  Injectable,
  UnauthorizedException,
  BadRequestException,
  ConflictException,
  Logger,
} from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { JwtService } from '@nestjs/jwt'
import { EventEmitter2 } from '@nestjs/event-emitter'
import { PrismaService } from 'prisma/prisma.service'
import { User, OtpStatus, Role } from '@prisma/client'
import * as crypto from 'crypto'
import {
  RequestOtpDto,
  VerifyOtpDto,
  RefreshTokenDto,
  CreateAnonymousSessionDto,
} from './dto/auth.dto'
import { JwtPayload } from './strategies/jwt.strategy'

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name)

  constructor(
    private readonly prisma: PrismaService,
    private readonly jwtService: JwtService,
    private readonly configService: ConfigService,
    private readonly eventEmitter: EventEmitter2,
  ) {}

  // –ó–∞–ø—Ä–æ—Å OTP –∫–æ–¥–∞
  async requestOtp(dto: RequestOtpDto, ipAddress: string, userAgent: string) {
    const { phone, deviceInfo } = dto

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const recentOtp = await this.prisma.otpCode.findFirst({
      where: {
        phone,
        status: OtpStatus.PENDING,
        createdAt: {
          gte: new Date(
            Date.now() - this.configService.get<number>('otp.resendTimeout', 3 * 60 * 1000),
          ),
        },
      },
      orderBy: { createdAt: 'desc' },
    })

    if (recentOtp) {
      const timeLeft = Math.ceil(
        (recentOtp.createdAt.getTime() +
          this.configService.get<number>('otp.resendTimeout', 3 * 60 * 1000) -
          Date.now()) /
          1000,
      )
      throw new BadRequestException(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫—É–Ω–¥`)
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥
    const code = this.generateOtpCode()
    const expiresAt = new Date(
      Date.now() + this.configService.get<number>('otp.expiresIn', 5 * 60 * 1000),
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await this.prisma.user.findUnique({
      where: { phone },
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –∫–æ–¥
    await this.prisma.otpCode.create({
      data: {
        userId: user?.id,
        phone,
        code,
        expiresAt,
        ipAddress,
        userAgent,
      },
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    if (this.configService.get<boolean>('otp.testMode')) {
      this.logger.log(`üì± OTP –∫–æ–¥ –¥–ª—è ${phone}: ${code}`)
    } else {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      await this.sendSms(phone, `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`)
    }

    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    this.eventEmitter.emit('auth.otp.requested', { phone, ipAddress })

    const response: {
      message: string
      resendAfter: number
      code?: string // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    } = {
      message: 'OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      resendAfter: this.configService.get<number>('otp.resendTimeout', 3 * 60 * 1000) / 1000,
    }

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç
    if (this.configService.get<boolean>('otp.testMode')) {
      response['code'] = code
    }

    return response
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ OTP –∫–æ–¥–∞
  async verifyOtp(dto: VerifyOtpDto, ipAddress: string, userAgent: string) {
    const { phone, code, deviceInfo } = dto

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π OTP –∫–æ–¥
    const otpRecord = await this.prisma.otpCode.findFirst({
      where: {
        phone,
        code,
        status: OtpStatus.PENDING,
        expiresAt: { gte: new Date() },
      },
      orderBy: { createdAt: 'desc' },
    })

    if (!otpRecord) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ OTP
      await this.prisma.otpCode.updateMany({
        where: {
          phone,
          status: OtpStatus.PENDING,
        },
        data: {
          attemptCount: { increment: 1 },
        },
      })

      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if (otpRecord.attemptCount >= this.configService.get<number>('otp.maxAttempts', 3)) {
      await this.prisma.otpCode.update({
        where: { id: otpRecord.id },
        data: { status: OtpStatus.EXPIRED },
      })
      throw new UnauthorizedException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const result = await this.prisma.$transaction(async (tx) => {
      // –ü–æ–º–µ—á–∞–µ–º OTP –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await tx.otpCode.update({
        where: { id: otpRecord.id },
        data: {
          status: OtpStatus.USED,
          usedAt: new Date(),
        },
      })

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await tx.user.findUnique({
        where: { phone },
      })

      if (!user) {
        user = await tx.user.create({
          data: {
            phone,
            role: Role.CUSTOMER,
          },
        })

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        this.eventEmitter.emit('auth.user.registered', {
          userId: user.id,
          phone,
        })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      await tx.user.update({
        where: { id: user.id },
        data: { lastLoginAt: new Date() },
      })

      // –°–æ–∑–¥–∞–µ–º refresh —Ç–æ–∫–µ–Ω
      const refreshToken = await this.createRefreshToken(
        tx,
        user.id,
        deviceInfo,
        ipAddress,
        userAgent,
      )

      return { user, refreshToken }
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokens = await this.generateTokens(result.user)

    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—Ö–æ–¥–µ
    this.eventEmitter.emit('auth.user.login', {
      userId: result.user.id,
      phone,
    })

    return {
      ...tokens,
      user: {
        id: result.user.id,
        phone: result.user.phone,
        role: result.user.role,
        firstName: result.user.firstName ?? undefined,
        lastName: result.user.lastName ?? undefined,
        email: result.user.email ?? undefined,
      },
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  async refreshTokens(dto: RefreshTokenDto, ipAddress: string, userAgent: string) {
    const { refreshToken } = dto

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
    let payload: JwtPayload
    try {
      payload = this.jwtService.verify(refreshToken, {
        secret: this.configService.get<string>('jwt.refreshSecret'),
      })
    } catch (error) {
      throw new UnauthorizedException('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω')
    }

    if (payload.type !== 'refresh') {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞')
    }

    // –•—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
    const hashedToken = this.hashToken(refreshToken)

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –ë–î
    const tokenRecord = await this.prisma.refreshToken.findUnique({
      where: { token: hashedToken },
      include: { user: true },
    })

    if (!tokenRecord || tokenRecord.isRevoked || tokenRecord.expiresAt < new Date()) {
      throw new UnauthorizedException('Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await this.prisma.refreshToken.update({
      where: { id: tokenRecord.id },
      data: { lastUsedAt: new Date() },
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const tokens = await this.generateTokens(tokenRecord.user)

    return {
      ...tokens,
      user: {
        id: tokenRecord.user.id,
        phone: tokenRecord.user.phone,
        role: tokenRecord.user.role,
        firstName: tokenRecord.user.firstName ?? undefined,
        lastName: tokenRecord.user.lastName ?? undefined,
        email: tokenRecord.user.email ?? undefined,
      },
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ—Å—Å–∏–∏
  async createAnonymousSession(dto: CreateAnonymousSessionDto, ipAddress: string) {
    const { deviceInfo } = dto
    const sessionId = crypto.randomUUID()
    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 –¥–Ω–µ–π

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é —Å–µ—Å—Å–∏—é
    const anonymousUser = await this.prisma.anonymousUser.create({
      data: {
        sessionId,
        deviceInfo,
        ipAddress,
        expiresAt,
      },
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const payload: JwtPayload = {
      sub: anonymousUser.id,
      type: 'access',
      sessionId: anonymousUser.sessionId,
    }

    const sessionToken = this.jwtService.sign(payload, {
      secret: this.configService.get<string>('jwt.anonymousSecret'),
      expiresIn: this.configService.get<string>('jwt.anonymousExpiresIn'),
    })

    return {
      sessionToken,
      sessionId: anonymousUser.sessionId,
      expiresIn: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    }
  }

  // –í—ã—Ö–æ–¥ (–æ—Ç–∑—ã–≤ refresh —Ç–æ–∫–µ–Ω–∞)
  async logout(userId: string, refreshToken?: string) {
    if (refreshToken) {
      // –û—Ç–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
      const hashedToken = this.hashToken(refreshToken)
      await this.prisma.refreshToken.updateMany({
        where: {
          userId,
          token: hashedToken,
        },
        data: { isRevoked: true },
      })
    } else {
      // –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.prisma.refreshToken.updateMany({
        where: { userId },
        data: { isRevoked: true },
      })
    }

    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—ã—Ö–æ–¥–µ
    this.eventEmitter.emit('auth.user.logout', { userId })
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OTP –∫–æ–¥–∞
  private generateOtpCode(): string {
    const length = this.configService.get<number>('otp.length') || 4 // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const min = Math.pow(10, length - 1)
    const max = Math.pow(10, length) - 1
    return Math.floor(min + Math.random() * (max - min + 1)).toString()
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
  private async generateTokens(user: User) {
    const accessPayload: JwtPayload = {
      sub: user.id,
      phone: user.phone,
      role: user.role,
      type: 'access',
    }

    const refreshPayload: JwtPayload = {
      sub: user.id,
      type: 'refresh',
    }

    const [accessToken, refreshToken] = await Promise.all([
      this.jwtService.signAsync(accessPayload, {
        secret: this.configService.get<string>('jwt.accessSecret'),
        expiresIn: this.configService.get<string>('jwt.accessExpiresIn'),
      }),
      this.jwtService.signAsync(refreshPayload, {
        secret: this.configService.get<string>('jwt.refreshSecret'),
        expiresIn: this.configService.get<string>('jwt.refreshExpiresIn'),
      }),
    ])

    return {
      accessToken,
      refreshToken,
      expiresIn: 15 * 60, // 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      tokenType: 'Bearer',
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î
  private async createRefreshToken(
    tx: any,
    userId: string,
    deviceInfo: any,
    ipAddress: string,
    userAgent: string,
  ) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    const token = crypto.randomBytes(32).toString('hex')
    const hashedToken = this.hashToken(token)
    const expiresAt = new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) // 90 –¥–Ω–µ–π

    await tx.refreshToken.create({
      data: {
        userId,
        token: hashedToken,
        deviceInfo,
        ipAddress,
        userAgent,
        expiresAt,
      },
    })

    return token
  }

  // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  private hashToken(token: string): string {
    return crypto.createHash('sha256').update(token).digest('hex')
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS (–∑–∞–≥–ª—É—à–∫–∞)
  private async sendSms(phone: string, message: string): Promise<void> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
    this.logger.log(`SMS to ${phone}: ${message}`)
  }
}
